<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on Aynxul03 写字的地方</title>
    <link>https://ayx.moefox.tech/categories/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on Aynxul03 写字的地方</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 04 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ayx.moefox.tech/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在 Hugo 主题 Stack 中轻松配置 Waline 评论系统</title>
      <link>https://ayx.moefox.tech/waline/</link>
      <pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ayx.moefox.tech/waline/</guid>
      <description>你以前也许听说过或用过 Valine。Waline 与它差不多，但管理功能集成在内，并可以更方便地部署。
如果你使用其他没有 Waline 支持的 Hugo 主题或其他博客系统，按本文部署后可以参考官方文档来引入客户端。
在 LeanCloud 上部署数据库 注册 LeanCloud 国际版并进入控制台。
如果您决定使用 LeanCloud 国内版，您需要为您创建的应用额外绑定已备案的域名。
创建开发版新应用（随意命名）并复制设置 - 应用凭证中的前三项值，稍后会添加在 Vercel 中的环境变量里。
在 Vercel 上部署服务端  点击按钮跳转到 Vercel.com 部署  （推荐）使用 GitHub 登录，创建存储库（可以是私有 Repo），跳过创建团队（反正这也不是什么需要团队协作的项目），部署。
两分钟左右部署就会完成。
完成部署后在 Settings 中找到 Environment Variables，分别添加三个环境变量 LEAN_ID、LEAN_KEY 和 LEAN_MASTER_KEY 。VALUE 分别填写在 LeanCloud 中获得的 APP ID、APP KEY、和 Master Key。
记得注册你的管理员账号，以免被访客注册。第一个注册的用户会得到管理权限。
在配置文件中配置客户端 最后打开站点根目录下的 config.yaml，在 params 下添加以下几行：（如果你当初拷贝了 Stack 提供的 config.yaml 文件，那么这段在第 60 行左右，只需填入 serverURL 即可）
 # Waline client configuration see: https://waline.</description>
    </item>
    
    <item>
      <title>出现 error: ld returned 1 exit status 的五种原因以及解决方法</title>
      <link>https://ayx.moefox.tech/error-ld-returned-1-exit-status/</link>
      <pubDate>Sun, 22 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ayx.moefox.tech/error-ld-returned-1-exit-status/</guid>
      <description>这个错误让人懵圈的地方就在于它不会给出错误出现的位置，让已经写了几百行的你痛不欲生。
可执行文件被占用了 因此编译器无法覆盖旧的可执行文件，所以编译失败。
这很有可能是你没发现它还没结束运行。
（我目前在用的 IDE：Visual Studio Code）
扩展：C/C++ Compile Run（可以方便地编译单个 cpp 文件，且不会因为路径中存在空格或中文出错。）  
解决方案 Dev C++ 等 IDE 直接把弹出的窗口（黑框）关了就行了
VS Code 可以从输出切换到终端选项卡，使用快捷键 Ctrl+C 结束程序（同样适用于 external console ）。
实在不行就用任务管理器和 taskkill 吧  
主函数不存在（main 拼写错误） 你不太可能不写主函数，但是你很有可能把 main 打成 mian 或者什么其他奇怪的东西。
在编译器眼里，这些可不能算主函数。
 
解决方案 把 main 拼对。
所调用的函数仅进行了声明 这种情况下新版编译器仍旧会输出 error: ld returned 1 exit status 这一让人迷惑的错误。   但是一般也不会把函数体和声明分开写吧&amp;hellip;
（函数声明在主函数上方即可，函数体是可以写在 main 函数下方的。）
解决方案 把漏写了的函数体补上。
（旧版编译器）在主函数中定义了函数 新版编译器发现你在 main 函数中定义了其它函数报错并不是error: ld returned 1 exit status，</description>
    </item>
    
    <item>
      <title>MySSL 安全签章</title>
      <link>https://ayx.moefox.tech/ssl/</link>
      <pubDate>Mon, 02 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ayx.moefox.tech/ssl/</guid>
      <description>MySSL 安全认证   又摸了一下午整了个这么个东西出来 要得到 A+ 评级，您的网站必须启用 HSTS 且 max-age 属性不小于 6个月（即 15768000 秒） 请注意启用 HSTS 后所有不支持 HTTPS 的子域名都将无法访问，且在 max-age 属性设置的时间内无法恢复。 要得到 ATS 合规 ，您的网站必须支持 TLS v1.2。 要得到 PCI DSS 合规，您的网站不得支持 TLS v1.0。 PCI安全标准委员会规定2018年6月30日之后，开启TLS1.0将导致PCI DSS不合规，
具体参考：《更严格的PCI DSS合规标准》
HSTS 相关配置可以参考 MySSL.com 的 HTTPS安全与兼容性配置指南 HTTP Strict Transport Security Header Testing Tool</description>
    </item>
    
    <item>
      <title>题解 P1603 斯诺登的密码</title>
      <link>https://ayx.moefox.tech/key-to-p1603/</link>
      <pubDate>Mon, 02 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ayx.moefox.tech/key-to-p1603/</guid>
      <description>题面来自洛谷，根据我的个人喜好有小修改
题目背景 根据斯诺登事件出的一道水题
题目描述 2013 年 X 月 X 日，俄罗斯办理了斯诺登的护照，于是他混迹于一架开往委内瑞拉的飞机。但是，这件事情太不周密了，因为 FBI 的间谍早已获悉他的具体位置——但这不是最重要的——最重要的是如果要去委内瑞拉，那么就要经过古巴，而经过古巴的路在美国的掌控之中。
丧心病狂的奥巴马迫降斯诺登的飞机，搜查时却发现，斯诺登杳无踪迹。但是，在据说是斯诺登的座位上，发现了一张纸条。纸条由纯英文构成：Obama is a two five zero.（以 . 结束输出，只有 6 个单词+一个句号，句子开头如没有大写亦为合法）这句话虽然有点无厘头，但是警官陈珺骛发现这是一条极其重要的线索。他在斯诺登截获的一台笔记本中找到了一个 C++ 程序，输入这条句子后立马给出了相对应的密码。陈珺鹜高兴得晕了过去，身为警官的你把字条和程序带上了飞机，准备飞往曼哈顿国际机场，但是在飞机上检查的时候发现——程序被粉碎了！飞机抵达华盛顿只剩5分钟，你必须在这 5 分钟内编写（杜撰）一个程序，免受上司的 10000000000%10 大板。破译密码的步骤如下：
（1）找出句子中所有用英文表示的数字($\leq 20$)，列举在下：
正规：one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty
非正规：a both another first second third。为避免造成歧义，another 算作 $1$ 处理。
（2）将这些数字平方后对 $100$ 取模，如 $00,05,11,19,86,99$。
（3）把这些两位数按数位排成一行，组成一个新数，如果开头为 $0$，就去 $0$。
（4）找出所有排列方法中最小的一个数，即为密码。
// 数据已经修正 By absi2011 如果还有问题请联系我</description>
    </item>
    
    <item>
      <title>安装 Hugo 主题 Stack 时你可能会遇到的问题</title>
      <link>https://ayx.moefox.tech/stack/</link>
      <pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ayx.moefox.tech/stack/</guid>
      <description>啥？装了 Stack 拷了 exampleSites 以后不能正常 hugo -D了？ 试试以下两项操作。
删除根目录下的 config.toml Issus #105 @ CaiJimmy/hugo-theme-stack
生成 examplesite/content/post/rich-content/index.md 时报错 是因为是示例文章有请求 Twitter API 的 Shortcode ，需要 珂学上网 。
我的解决方式是直接把 YouTube 、 Twitter 和 Vimeo 的 ShortCode 都删了，反正以后也用不到（当然你也可以直接把这篇 rich-content 给整个删了）
Issus #191 @ CaiJimmy/hugo-theme-stack
另外，Bilibili 的 ShortCode 格式如下： （去掉两个反斜杠）
\{\{&amp;lt; bilibili BV1Zx411h7ue &amp;gt;}}
别一天到晚建博客了，赶紧写吧。 </description>
    </item>
    
    <item>
      <title>独角兽搜索</title>
      <link>https://ayx.moefox.tech/unicorn-search/</link>
      <pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ayx.moefox.tech/unicorn-search/</guid>
      <description>我的博客的站内搜索已经搭载了这款 微内核万物互联分布式软总线形式化验证 搜索引擎，大家可以在侧边栏点击搜索抢先体验一下！
相信这将是与 花瓣搜索 一样的优秀国产项目！让我们在一起拒绝卡脖子！星星之火可以燎原！</description>
    </item>
    
    <item>
      <title>题解 UPC-1488 客户调查(client)</title>
      <link>https://ayx.moefox.tech/upc1488/</link>
      <pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ayx.moefox.tech/upc1488/</guid>
      <description>题目描述： 时间：1s 空间：32M
公司派你去和几位客户面谈，以了解他们对公司产品的意见。你逐个打电话与客户联系，得知他们一般都很忙，不过他们还是可以为你抽出一点时间。现在的问题是有些客户的时间有冲突，你无法在一天内联系所有客户。所以你需要一个程序来帮助你安排第一天的工作，使得你能尽可能地和更多的客户进行联系。注意，客户不愿意你打乱他们的计划。如果你和某个客户约定见面，必须按时到达并且充分利用这段时间和他交谈，这样才不至于让他产生不满。你可以假设从一个客户处到另一个客户处的时间短得忽略不计。
输入格式： 输入包括了多个测试数据，每个测试数据开头是一个整数 $n（1 \le n \le 10000）$，表示客户总数。接下来n行每行包括两个正整数 $s$、$t$，分别表示该客户的空闲时间段的起始时间和终止时间。$s&amp;lt;t$
输出格式： 对于每个测试数据，在单独一行内输出你所能接触到的最多客户数。
样例输入： 3 1 15 2 19 15 17 样例输出： 2
约定： (无)
提示： (无)
代码 /* Name: 7、客户调查 Copyright: Aynxul03 Author: Aynxul03 Date: 2021-07-13 Description: 时间：1s 空间：32M 题目描述： 公司派你去和几位客户面谈，以了解他们对公司产品的意见。你逐个打电话与客户联系， 得知他们一般都很忙，不过他们还是可以为你抽出一点时间。现在的问题是有些客户的 时间有冲突，你无法在一天内联系所有客户。所以你需要一个程序来帮助你安排第一天 的工作，使得你能尽可能地和更多的客户进行联系。注意，客户不愿意你打乱他们的计 划。如果你和某个客户约定见面，必须按时到达并且充分利用这段时间和他交谈，这样 才不至于让他产生不满。你可以假设从一个客户处到另一个客户处的时间短得忽略不计。 输入格式： 输入包括了多个测试数据，每个测试数据开头是一个整数n（1&amp;lt;=n&amp;lt;=10000），表示客户总数。 接下来n行每行包括两个正整数s、t，分别表示该客户的空闲时间段的起始时间和终止时间。s&amp;lt;t 输出格式： 对于每个测试数据，在单独一行内输出你所能接触到的最多客户数。 */ #include&amp;lt;bits/stdc++.h&amp;gt;using namespace std; int n,lt,ans; struct sb{ int start,end; }client[1001]; bool cmp(sb a,sb b){return a.end&amp;lt;b.end;}//按结束时间升序 int main(){ ios::sync_with_stdio(0); cin&amp;gt;&amp;gt;n; for(int i=0;i&amp;lt;n;i++) cin&amp;gt;&amp;gt;client[i].</description>
    </item>
    
    <item>
      <title>题解 P5707 【深基2.例12】上学迟到</title>
      <link>https://ayx.moefox.tech/p5707/</link>
      <pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ayx.moefox.tech/p5707/</guid>
      <description>（题面来自洛谷）
题目描述 yyy 的学校要求早上 8 点前到达。学校到 yyy 的家一共有 $s$($s\le 10000$) 米，而 yyy 可以以 $v$($v&amp;lt;10000$) 米每分钟的速度匀速走到学校。此外在上学路上它还要额外花 10 分钟时间进行垃圾分类。请问为了避免迟到 yyy 最晚什么时候出门？输出 HH:MM 的时间格式，不足两位时补零。由于路途遥远， yyy 可能不得不提前一天出发，不过不可能提前超过一天。
输入格式 两个正整数 s,v，意思已经在题目中给定。
输出格式 hh:mm 表示最晚离开家的时间（时:分，必须输出两位，不足两位前面补0）
输入输出样例 输入 #1
100 99
输出 #1
07:48
分析 小学的匀速直线运动问题，t=s/v 但是有几个小细节 1.不要忘了加上10分钟
2.怎么输出HH:MM的格式？
试了一下像保留小数点一样使用C的标准输入输出（Xchkoo口中所说的“那套老掉牙的cstdio”）的占位符，居然啪一下就行了
3.怎么处理时分进位？60进制，因为不知道进几次所以用while循环实现就行了
4.s/v有小数点怎么办？不能四舍五入，只能向上取整，因为迟到0.000000000001分钟也是迟到。
5.千米迢迢上学的yyy问题：八个小时都到不了学校怎么办？当h自减变为-1的时候将h赋值为23即可，由于不可能提前超过一天出发（某学生连续赶路30余小时猝死）所以if即可
6.h及m的计算问题：我的做法是赋初值08:00然后往回倒减分钟数，然后进位到小时位
7.为什么要发水题的题解？这样比较容易坚持每天刷题===
最近在我身上发生了很多事，但是不想放弃OI。
代码 #include&amp;lt;bits/stdc++.h&amp;gt;using namespace std; int main() { int s,v; cin&amp;gt;&amp;gt;s&amp;gt;&amp;gt;v; int t=ceil(1.0*s/v); int h=8,m=-t-10; while(m&amp;lt;=0) { m+=60; h--; if(h&amp;lt;0) h=23; } printf(&amp;#34;%.</description>
    </item>
    
    <item>
      <title>题解 P2669 [NOIP2015 普及组] 金币</title>
      <link>https://ayx.moefox.tech/p2669/</link>
      <pubDate>Sun, 09 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ayx.moefox.tech/p2669/</guid>
      <description>（题面来自洛谷）
题目描述 国王将金币作为工资，发放给忠诚的骑士。第一天，骑士收到一枚金币；之后两天（第二天和第三天），每天收到两枚金币；之后三天（第四、五、六天），每天收到三枚金币；之后四天（第七、八、九、十天），每天收到四枚金币……；这种工资发放模式会一直这样延续下去：当连续 $n$ 天每天收到 $n$ 枚金币后，骑士会在之后的连续 $n+1$ 天里，每天收到 $n+1$ 枚金币。
请计算在前 $k$ 天里，骑士一共获得了多少金币。
输入格式 一个正整数 $k$ ，表示发放金币的天数。
输出格式 一个正整数，即骑士收到的金币数。
输入输出样例 输入 #1
6 输出 #1
14 输入 #2
1000 输出 #2
29820 说明/提示
【输入输出样例 1 说明】
骑士第一天收到一枚金币；第二天和第三天，每天收到两枚金币；第四、五、六天，每天收到三枚金币。因此一共收到 $1+2+2+3+3+3=14$ 枚金币。
对于 $100%$ 的数据，$1\le k\le 10^4$
分析 代码 #include&amp;lt;bits/stdc++.h&amp;gt;using namespace std; int main() { int K,	//发放金币的天数 	coin = 0,	//骑士收到的金币数 	per = 1,	//每天发给骑士的金币数 	remain = 1;	//按此数量发放的剩余天数 	cin&amp;gt;&amp;gt;K; for(int i=1;i&amp;lt;=day;i++) { coin+=per;	//发放金币 	if(--remain==0) remain=++per;	//之后的 per+1 天每天发放 per+1 枚金币 	} cout&amp;lt;&amp;lt;coin; return 0; } 编辑记录</description>
    </item>
    
    <item>
      <title>题解 P5719 【深基4.例3】分类平均</title>
      <link>https://ayx.moefox.tech/p5719/</link>
      <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ayx.moefox.tech/p5719/</guid>
      <description>这题太有意思了，发个题解纪念一下
题面来自洛谷
$\LaTeX$ 渲染不了，哭了（明明后台预览是可以渲染的啊=
（搬到 Hugo 博客可以正常显示了）
题目描述 给定 $n(n \le 10000)$ 和 $k(k \le 100)$，将从 $1$ 到 $n$ 之间的所有正整数可以分为两类：$A$ 类数可以被 $k$ 整除（也就是说是 $k$ 的倍数），而 $B$ 类数不能。请输出这两类数的平均数，精确到小数点后 $1$ 位，用空格隔开。
数据保证两类数的个数都不会是 $0$。
输入格式 无
输出格式 无
输入输出样例 输入 #1
100 16 输出 #1
56.0 50.1 分析 利用了等差数列等高阶数学知识来减少循环次数。
代码（C++） #include&amp;lt;bits/stdc++.h&amp;gt;using namespace std; int main(){ int n,k,can,cant,all,num=0; cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;k; all=(n+1)*n/2; for(int i=k;i&amp;lt;=n;i+=k){ can+=i; num++; } cant=all-can; double a = (double)can/num; double a_ = (double)cant/(n-num); printf(&amp;#34;%.</description>
    </item>
    
    <item>
      <title>分享一下我的博客园在用的修改版 Wider Gao 博客园主题</title>
      <link>https://ayx.moefox.tech/cnblogs-theme-share/</link>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ayx.moefox.tech/cnblogs-theme-share/</guid>
      <description>如你所见，我的博客现在使用 Hugo，因此该修改版主题不太可能发布更新。
此主题并非我的原创作品，原作者为 Wider Gao
而且改得很烂，主页的文章展示都搞炸了（点击查看demo），不建议使用（但个人感觉也不是特别糟糕）
我的改动 我作出了如下改动：
 把原作者使用的js源（bootcss.com）替换为 bootcdn.net，提升加载速度（至少在我所在的地区可以） 把原作者在博客主题更新了一文中提供的 my.css 替换为从他的页面上扒下来的css（因为这个只有几十行的 my.css 根本没法用=我也不知道为什么，从页面上直接扒也是该文评论区提供的方法）  下载链接 文件均发布在 Pastebin.com 以及 Ubuntu Pastebin 上
如需获取原版，请移步Wider Gao的博文
页面定制 CSS 代码 Pastebin.com 复制 下载
Ubuntu Pastebin
博客侧边栏公告 Pastebin.com 复制 下载
Ubuntu Pastebin
页首 HTML 代码 只有一行，就直接放这了
&amp;lt;link href=&amp;quot;https://cdn.bootcdn.net/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
页脚 HTML 代码 Pastebin.com 复制 下载
Ubuntu Pastebin
使用 先修改一下这些代码（把各种图片链接替换一下） 建议先粘贴到编辑器里操作（搬迁备注：现在博客园后台终于有能看的编辑器而不是光秃秃的HTML原汁原味文本框了，我青结）
背景图 替换 https://cdn.luogu.com.cn/upload/image_hosting/utntnuud.png
题外话：洛谷图床会屏蔽站外链接 :( 但是登陆了上传图片的洛谷账号就能加载
这就是为什么之前syr看不到我博客园的头图而我能看到
头像 替换 https://pic.cnblogs.com/avatar/2228888/20201128101240.png
在博客园后台打开设置，将博客皮肤改为 Custom ，并勾选 禁用模板默认CSS ，然后将这些代码粘贴到框里，保存。</description>
    </item>
    
    <item>
      <title>使用 Node.js（安装Hexo）时出现了 rollbackFailedOptional 错误的解决方法</title>
      <link>https://ayx.moefox.tech/rollbackfailedoptional/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ayx.moefox.tech/rollbackfailedoptional/</guid>
      <description>我的解决方法 以 管理员身份 运行一个编辑器 打开 C:\Program Files\nodejs\node_modules\npm\npmrc   如果你安装Node.js时修改了安装路径那么就不是这个路径了
  如果这个文件不存在就自己新建一个文本文档并去掉扩展名 .txt
  修改 C:\Program Files\nodejs\node_modules\npm\.npmrc 没有用
  填入以下内容并保存 proxy = null registry = https://registry.npm.taobao.org disturl = https://npm.taobao.org/dist 然后再重新尝试安装Hexo（npm install hexo-cli -g）即可。 如果依旧无法解决可以尝试在以管理员身份启动的命令提示符或 Powershell 中执行此命令 npm config set disturl https://npm.taobao.org/dist 文章迁移备注 从博客园搬文章的时候无意发现本文已被以下站点转载：
qdmana.com
yunjuu.com
我并未授权这些网站转载我的文章。
虽然这篇博客没有花我很多时间，但是这些网站的行为让我感到十分不满。
 编辑记录
2021-08-05 13:20:00</description>
    </item>
    
    <item>
      <title>题解 HDU2063 过山车</title>
      <link>https://ayx.moefox.tech/hdu2063/</link>
      <pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ayx.moefox.tech/hdu2063/</guid>
      <description>题面链接 HDU 2063
Vjudge
题意概述 求一个二分图最大匹配的边数
题目标签 匈牙利算法模板题
参考代码 #include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; #define maxn 1000 + 10 int n, m, k, head[maxn], link[maxn], cnt, tot; bool vis[maxn]; struct Edge { int to, nxt; }edge[maxn]; void add(int u, int v) { edge[cnt].to = v; edge[cnt].nxt = head[u]; head[u] = cnt; cnt++; } bool dfs(int u) //深搜判断对于点集v2中的一个点u是否能与点集v1中的一个点v匹配 { for(int i = head[u]; i != -1; i = edge[i].nxt){ //枚举能匹配的点 	int v = edge[i].</description>
    </item>
    
    <item>
      <title>题解 YBT 1000：入门测试题目</title>
      <link>https://ayx.moefox.tech/ybt1000/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ayx.moefox.tech/ybt1000/</guid>
      <description>OpenJudge - 01:A+B问题
信息学奥赛一本通（C++版）在线评测系统
如果非要做这题我推荐第一个 OJ，第二个 OJ 的界面实在惨不忍睹
（虽然第一个题目有题号检索比较方便而且貌似用户比较多）
更好的选择是不要做《信奥赛一本通》的题
题目的背景、描述、输入输出格式样例 1000：入门测试题目 时间限制: 1000 ms 内存限制: 32768 KB 【题目描述】 求两个整数的和。 【输入】 一行，两个用空格隔开的整数。 【输出】 两个整数的和。 【输入样例】 1 2 【输出样例】 3 题意分析与算法设计 新手不用理会 时间限制 和 内存限制，一般来说学到后面才会出现 TLE（Time Limit Exceed，超出时间限制）和 MLE（Memory Limit Exceed，超出内存限制）的情况。
（关于这些术语，可以在这里了解。）
至于这个问题，就是一个最简单的 A+B 问题。
参考用完整代码 各位一定要养成良好的代码风格，因为代码不仅仅是给机器看的，有时候人也要看。
使用 cin/cout（需要调用 iostreeam 头文件）：
#include &amp;lt;iostream&amp;gt;using namespace std; int main() { int a, b; cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b; cout &amp;lt;&amp;lt; a + b &amp;lt;&amp;lt; endl; } 使用 scanf/printf（需要调用 cstdio 头文件）：</description>
    </item>
    
    <item>
      <title>题解 P1650 田忌赛马</title>
      <link>https://ayx.moefox.tech/p1650/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ayx.moefox.tech/p1650/</guid>
      <description>(题面来自洛谷)
题目描述 我国历史上有个著名的故事： 那是在2300年以前。齐国的大将军田忌喜欢赛马。他经常和齐王赛马。他和齐王都有三匹马：常规马，上级马，超级马。一共赛三局，每局的胜者可以从负者这里取得200银币。每匹马只能用一次。齐王的马好，同等级的马，齐王的总是比田忌的要好一点。于是每次和齐王赛马，田忌总会输600银币。
田忌很沮丧，直到他遇到了著名的军师――孙膑。田忌采用了孙膑的计策之后，三场比赛下来，轻松而优雅地赢了齐王200银币。这实在是个很简单的计策。由于齐王总是先出最好的马，再出次好的，所以田忌用常规马对齐王的超级马，用自己的超级马对齐王的上级马，用自己的上级马对齐王的常规马，以两胜一负的战绩赢得200银币。实在很简单。
如果不止三匹马怎么办？这个问题很显然可以转化成一个二分图最佳匹配的问题。把田忌的马放左边，把齐王的马放右边。田忌的马A和齐王的B之间，如果田忌的马胜，则连一条权为200的边；如果平局，则连一条权为0的边；如果输，则连一条权为－200的边……如果你不会求最佳匹配，用最小费用最大流也可以啊。 然而，赛马问题是一种特殊的二分图最佳匹配的问题，上面的算法过于先进了，简直是杀鸡用牛刀。现在，就请你设计一个简单的算法解决这个问题。
输入格式 第一行一个整数n，表示他们各有几匹马（两人拥有的马的数目相同）。第二行n个整数，每个整数都代表田忌的某匹马的速度值(0 &amp;lt;= 速度值&amp;lt;= 100)。第三行n个整数，描述齐王的马的速度值。两马相遇，根据速度值的大小就可以知道哪匹马会胜出。如果速度值相同，则和局，谁也不拿钱。
【数据规模】
对于20%的数据，1&amp;lt;=N&amp;lt;=65；
对于40%的数据，1&amp;lt;=N&amp;lt;=250；
对于100%的数据，1&amp;lt;=N&amp;lt;=2000。
输出格式 仅一行，一个整数，表示田忌最大能得到多少银币。
输入输出样例 输入 #1
3 92 83 71 95 87 74 输出 #1
200 分析 都在代码注释里了
代码 // Problem: P1650 田忌赛马 // Contest: Luogu // URL: https://www.luogu.com.cn/problem/P1650 // Memory Limit: 125 MB // Time Limit: 1000 ms // // Powered by CP Editor (https://cpeditor.org)  #include&amp;lt;bits/stdc++.h&amp;gt;using namespace std; int n, a[2001],	//田忌的马 	b[2001],	//齐王的马 	m1, m2, qian; int main(){ scanf(&amp;#34;%d&amp;#34;,&amp;amp;n); for(int i=0;i&amp;lt;n;i++) scanf(&amp;#34;%d&amp;#34;,&amp;amp;a[i]); for(int i=0;i&amp;lt;n;i++) scanf(&amp;#34;%d&amp;#34;,&amp;amp;b[i]); sort(a,a+n); sort(b,b+n); int n1=n-1, n2=n-1; while(m1&amp;lt;=n1){ if(a[n1]&amp;gt;b[n2]){	//田忌最快的比齐王最快的快 	qian+=200;	//赢钱 	n1--,n2--;	//两边各去掉一匹马 	}else if(a[n1]&amp;lt;b[n2]){//田忌最快的赢不了齐王最快的，就丢一匹最慢的 	qian-=200;	//输钱 	m1++,n2--; }else{	//如果 势 均 力 敌 的话 	if(a[m1]&amp;gt;b[m2]){ //田忌最慢的能赢齐王最慢的，就上 	qian+=200;	//赢钱 	m1++,m2++;	}else{	//赢不了就用最慢的消耗齐王最快的 	if(a[m1]&amp;lt;b[n2]) qian-=200;	//我 再 忍 你 一 手 	m1++,n2--; } } } printf(&amp;#34;%d&amp;#34;,qian); return 0; } 修改记录</description>
    </item>
    
    <item>
      <title>OJ术语的解释： AC、WA、TLE、OLE、MLE、RE、PE、CE、UKE 都是些啥？</title>
      <link>https://ayx.moefox.tech/explanation-of-oj-terminology/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ayx.moefox.tech/explanation-of-oj-terminology/</guid>
      <description>正经解释    简称 全称 中文称谓 补充说明 &amp;amp; 修改建议     OJ Online Judge 在线判题系统 可以对你的程序进行评测并给出结果。洛谷、SPOJ、Codeforces、Vijos、UVa OJ 都是在线判题系统   AC Accepted 通过 嘲讽你还没过的同学 想想在时间和空间上能否做到更优，或是继续做其他题目   WA Wrong Answer 答案错误 你的程序在规定的时间和内存限制内里输出了错误的答案，因此没有得分（想一想，有没有没有考虑到的特殊情况？如果你的程序根本无法对样例输入输出正确的答案，那么你的思路很可能有问题）   TLE Time Limit Exceed 超出时间限制 你的程序在该测试点上超出了题目给定的时间仍未结束运行，因此被强行中止（检查是否存在死循环或过多的循环，使用时间复杂度更优的算法，进行一些常数及输入输出优化，剪枝）如果你的程序能正常给出答案，记得使用循环控制语句 break 或 return 0、exit(0) 这样的语句结束程序；在一些评测系统老旧的 OJ 中，没有读入完输入的数据也会造成 TLE，但是在洛谷不会发生。   OLE Output Limit Exceed 超出输出限制 你的程序在这个测试点中输出的字符数量超出了限制，因此被系统强行中止（检查是否存在死循环和没有注释掉的调试用输出语句）   MLE Memory Limit Exceed 超出内存限制 你的程序在运行过程中占用了过多的内存，因此被系统强行中止（检查是否在程序中使用了过大的数组或是往 STL 容器中存入了过多的数据）   RE Runtime Error 运行时出错 检查是否存在数组越界访问（尤其是C(++)语言选手）。另外，如果你在 main 函数中返回一个非 0 的值也会被系统认为程序异常退出   PE Presentation Error 格式错误 检查输出的空格/换行符数量是否与题面中的要求严格一致   CE Compile Error 编译错误 你的程序根本无法通过编译，也就没有可执行文件可以用来评测（检查语法，初学者建议着重检查分号和全角标点，建议敲代码时禁用中文输入法）   UKE Unknown Error 未知错误 评测姬也不知道出了什么问题（联系 OJ 管理员或出题人，稍后再尝试重新提交）    哈哈太搞笑了    简写 全称 中文称谓     AC Answer Cubi 粗鄙的答案   WA Wonderful Answer 优美的答案   TLE Time Limit Enough 时间充裕   OLE Output Limit Enough 输出足够   MLE Memory Limit Enough 内存充裕   RE Runtime Excellent 运行时（过于） 优秀   PE Pretty Excellent 十分优秀   CE Compile Easily 轻松通过编译   UKE Unbelievable Keeping Excellent 难以置信的保持优秀     AC=Answer Cubi 粗鄙的答案 WA=Wonderful Answer 优美的答案 TLE=Time Limit Enough 时间充裕 OLE=Output Limit Enough 输出足够 MLE=Memory Limit Enough 内存充裕 RE=Runtime Excellent 运行时（过于）优秀 PE=Pretty Excellent 十分优秀 CE=Compile Easily 轻松通过编译 UKE=Unbelievable Keeping Excellent 难以置信的保持优秀    出现AC时你需要将你的答案变得更优美才能通过； 而TLE、OLE、MLE、ER经常同时出现，可以给予你少量的额外分数； PE、CE都能给予你大量的额外分数； UKE这个标签非常稀有，可以让你直接通过这次比赛并名列前茅。  </description>
    </item>
    
  </channel>
</rss>
